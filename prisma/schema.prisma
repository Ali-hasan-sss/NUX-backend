generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(uuid())
  email                   String                  @unique
  password                String
  fullName                String?
  role                    Role                    @default(USER)
  emailVerified           DateTime?
  refreshToken            String?
  qrCode                  String                  @unique
  firebaseToken           String?
  isRestaurant            Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  passwordResetCode       String?
  passwordResetExpiry     DateTime?
  isActive                Boolean                 @default(true)
  updatedAt               DateTime                @default(now()) @updatedAt
  giftsSent               Gift[]                  @relation("GiftFrom")
  giftsReceived           Gift[]                  @relation("GiftTo")
  notifications           Notification[]
  payments                Payment[]
  purchases               Purchase[]
  restaurants             Restaurant?
  scanLogs                ScanLog[]
  StarsTransactions       StarsTransaction[]
  topUps                  TopUp[]
  balances                UserRestaurantBalance[]
}

model Restaurant {
  id                   String                  @id @default(uuid())
  userId               String                  @unique
  name                 String
  address              String
  latitude             Float
  longitude            Float
  isGroupMember        Boolean                 @default(false)
  PayPal_Email         Json?
  paypalAccessToken    String?
  paypalRefreshToken   String?
  stripeCustomerId     String?
  qrCode_drink         String?                 @unique
  qrCode_meal          String?                 @unique
  createdAt            DateTime                @default(now())
  logo                 String?
  isActive             Boolean                 @default(true)
  isSubscriptionActive Boolean                 @default(false)
  ads                  Ad[]
  gifts                Gift[]
  groupMemberships     GroupMembership[]
  menuCategories       MenuCategory[]
  payments             Payment[]
  purchases            Purchase[]
  owner                User                    @relation(fields: [userId], references: [id])
  ownedGroups          RestaurantGroup[]
  scanLogs             ScanLog[]
  starsTransactions    StarsTransaction[]
  subscriptions        Subscription[]          @relation("RestaurantSubscriptions")
  topUps               TopUp[]
  TopUpPackages        TopUpPackage[]
  balances             UserRestaurantBalance[]
  invoices             Invoice[]
}

model Plan {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  price           Float
  duration        Int
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  currency        String?
  stripeProductId String?
  stripePriceId   String?
  subscriberCount Int            @default(0)
  subscriptions   Subscription[]
  permissions     Permission[]
}

model Subscription {
  id             Int                @id @default(autoincrement())
  restaurantId   String
  planId         Int
  startDate      DateTime           @default(now())
  endDate        DateTime
  status         SubscriptionStatus @default(PENDING)
  paymentId      String?            @unique
  paymentMethod  String?
  transactionRef String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @default(now()) @updatedAt
  paymentStatus  String?
  plan           Plan               @relation(fields: [planId], references: [id])
  restaurant     Restaurant         @relation("RestaurantSubscriptions", fields: [restaurantId], references: [id])
  stripeSubscriptionId String?
  stripePriceId String?
  stripeCurrentPeriodEnd DateTime?
  stripeCurrentPeriodStart DateTime?
  stripeCustomerId String?
  stripeStatus String?
  stripePriceObject Json?
  payment        Payment?           @relation(fields: [paymentId], references: [id])
  invoices       Invoice[]

  @@index([planId, status])
  @@index([endDate])
  @@index([restaurantId, endDate, status])
}

model UserRestaurantBalance {
  id           String     @id @default(uuid())
  userId       String
  restaurantId String
  stars_drink  Int        @default(0)
  stars_meal   Int        @default(0)
  balance      Float      @default(0)
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, restaurantId])
}

model ScanLog {
  userId       String
  restaurantId String
  type         scanType
  qrCode       String
  latitude     Float
  longitude    Float
  createdAt    DateTime   @default(now())
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model StarsTransaction {
  userId       String
  restaurantId String
  type         scanType
  stars_drink  Int        @default(0)
  stars_meal   Int        @default(0)
  createdAt    DateTime   @default(now())
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Purchase {
  id           String           @id @default(uuid())
  userId       String
  restaurantId String?
  amount       Float
  createdAt    DateTime         @default(now())
  groupId      String?
  paymentType  paymentType
  group        RestaurantGroup? @relation(fields: [groupId], references: [id])
  restaurant   Restaurant?      @relation(fields: [restaurantId], references: [id])
  user         User             @relation(fields: [userId], references: [id])
}

model Payment {
  id            String     @id @default(uuid())
  userId        String
  restaurantId  String
  amount        Float
  currency      String?
  method        String
  status        String
  transactionId String     @unique
  paymentIntentId   String?
  checkoutSessionId String?
  receiptUrl        String?
  provider          String?   @default("stripe")
  paymentMethod     String?   // e.g., "CARD (VISA)", "CARD (MASTERCARD)"
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  invoice       Invoice?
  subscription  Subscription?

  @@index([restaurantId, createdAt])
}

model Invoice {
  id               String        @id @default(uuid())
  restaurantId     String
  subscriptionId   Int?
  stripeInvoiceId  String?       @unique
  hostedInvoiceUrl String?
  pdfUrl           String?
  amountDue        Float
  amountPaid       Float?
  currency         String
  status           InvoiceStatus
  periodStart      DateTime?
  periodEnd        DateTime?
  paymentMethod    String?       // e.g., "CARD (VISA)", "CARD (MASTERCARD)"
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  paymentId   String? @unique
  restaurant       Restaurant    @relation(fields: [restaurantId], references: [id])
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  payment          Payment?      @relation(fields: [paymentId], references: [id])

  @@index([restaurantId, createdAt])
  @@index([subscriptionId])
}

model TopUpPackage {
  restaurantId String
  name         String
  amount       Float
  bonus        Float      @default(0)
  currency     String     @default("EUR")
  description  String?
  isActive     Boolean    @default(true)
  isPublic     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  id           Int        @id @default(autoincrement())
  topUps       TopUp[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, name])
  @@index([restaurantId, isActive])
}

model TopUp {
  userId            String
  restaurantId      String
  amount            Float
  bonus             Float
  totalBalanceAdded Float
  method            String
  createdAt         DateTime      @default(now())
  id                Int           @id @default(autoincrement())
  planId            Int?
  plan              TopUpPackage? @relation(fields: [planId], references: [id])
  restaurant        Restaurant    @relation(fields: [restaurantId], references: [id])
  user              User          @relation(fields: [userId], references: [id])
}

model Gift {
  fromUserId   String
  toUserId     String
  restaurantId String?
  amount       Float
  status       String
  createdAt    DateTime         @default(now())
  id           Int              @id @default(autoincrement())
  type         paymentType
  groupId      String?
  fromUser     User             @relation("GiftFrom", fields: [fromUserId], references: [id])
  group        RestaurantGroup? @relation(fields: [groupId], references: [id])
  restaurant   Restaurant?      @relation(fields: [restaurantId], references: [id])
  toUser       User             @relation("GiftTo", fields: [toUserId], references: [id])
}

model Notification {
  userId    String
  title     String
  body      String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
}

model RestaurantGroup {
  id           String             @id @default(uuid())
  name         String
  description  String
  ownerId      String
  gifts        Gift[]
  joinRequests GroupJoinRequest[]
  members      GroupMembership[]
  purchases    Purchase[]
  owner        Restaurant         @relation(fields: [ownerId], references: [id])
}

model GroupMembership {
  groupId      String
  restaurantId String
  joinedAt     DateTime        @default(now())
  group        RestaurantGroup @relation(fields: [groupId], references: [id])
  restaurant   Restaurant      @relation(fields: [restaurantId], references: [id])

  @@id([groupId, restaurantId])
}

model GroupJoinRequest {
  fromRestaurantId String
  toRestaurantId   String
  groupId          String
  status           String
  createdAt        DateTime        @default(now())
  respondedAt      DateTime?
  id               Int             @id @default(autoincrement())
  group            RestaurantGroup @relation(fields: [groupId], references: [id])
}

model Ad {
  restaurantId String
  title        String
  description  String
  image        String
  category     String
  createdAt    DateTime   @default(now())
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model MenuCategory {
  id           Int        @id @default(autoincrement())
  restaurantId String
  title        String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  image        String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items        MenuItem[]

  @@index([restaurantId])
}

model MenuItem {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  title       String
  description String?
  price       Float
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  category    MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  RESTAURANT_OWNER
  ADMIN
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

enum paymentType {
  balance
  stars_meal
  stars_drink
}

enum scanType {
  drink
  meal
}

enum InvoiceStatus {
  PENDING
  PAID
  UNPAID
  CANCELLED
  FAILED
}

enum PermissionType {
  // Restaurant Management
  MANAGE_MENU
  MANAGE_QR_CODES
  MANAGE_GROUPS
  MANAGE_ADS
  MANAGE_PACKAGES
  
  // Customer Features
  CUSTOMER_LOYALTY
  CUSTOMER_NOTIFICATIONS
  CUSTOMER_GIFTS
  
  // Analytics & Reports
  VIEW_ANALYTICS
  EXPORT_DATA
  
  // Advanced Features
  CUSTOM_BRANDING
  API_ACCESS
  MULTI_LOCATION
  
  // Limits
  MAX_MENU_ITEMS
  MAX_ADS
  MAX_PACKAGES
  MAX_GROUP_MEMBERS
}

model Permission {
  id          Int           @id @default(autoincrement())
  type        PermissionType
  value       Int?          // For numeric limits (e.g., max items)
  isUnlimited Boolean       @default(false)
  planId      Int
  plan        Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@unique([planId, type])
  @@index([planId])
}
